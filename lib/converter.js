var e=require("bech32"),r=require("crypto-addr-codec");const o={decoder:e=>{const o=r.stripHexPrefix(e);if(!r.isValidChecksumAddress(e,null)&&o!==o.toLowerCase()&&o!==o.toUpperCase())throw Error("Invalid address checksum");return Buffer.from(r.stripHexPrefix(e),"hex")},encoder:e=>r.toChecksumAddress(e.toString("hex"),null),name:"ETH"};function t(r){return o=>e.encode(r,e.toWords(o))}const d=(r,o)=>{return{decoder:(d=o,r=>{const{prefix:o,words:t}=e.decode(r);if(o!==d)throw Error("Unrecognised address format");return Buffer.from(e.fromWords(t))}),encoder:t(o),name:r};var d},s=d("ETHERMINT","ethm"),n=d("ATMOS","atmos");exports.ATMOS=n,exports.ETH=o,exports.ETHERMINT=s,exports.Eip55ToBech32=(e,r,t)=>{let s=d(r,t),n=o.decoder(e);return s.encoder(n)},exports.atmosToEth=e=>{let r=n.decoder(e);return o.encoder(r)},exports.bech32ToEip55=(e,r,t)=>{let s=d(r,t).decoder(e);return o.encoder(s)},exports.ethToAtmos=e=>{let r=o.decoder(e);return n.encoder(r)},exports.ethToEthermint=e=>{let r=o.decoder(e);return s.encoder(r)},exports.ethermintToEth=e=>{let r=s.decoder(e);return o.encoder(r)};
//# sourceMappingURL=converter.js.map
